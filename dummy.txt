package com.optum.uhc.aem.talix.core.servlets;

import com.adobe.cq.dam.cfm.ContentElement;
import com.adobe.cq.dam.cfm.ContentFragment;
import com.day.cq.commons.Externalizer;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.api.servlets.HttpConstants;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Modified;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.metatype.annotations.AttributeDefinition;
import org.osgi.service.metatype.annotations.Designate;
import org.osgi.service.metatype.annotations.ObjectClassDefinition;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.Servlet;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import static org.apache.commons.lang.StringUtils.isNotBlank;
import static org.apache.commons.lang3.StringUtils.EMPTY;

@Component(service = Servlet.class, property = {Constants.SERVICE_DESCRIPTION + "=experience fragment custom export servlet",
        "sling.servlet.methods=" + HttpConstants.METHOD_GET, "sling.servlet.paths=" + "/bin/export"})
@Designate(ocd = CustomJSONExport.Configuration.class)
public class CustomJSONExport extends SlingSafeMethodsServlet {

    @Reference
    Externalizer externalizer;
    private static final long serialVersionUID = -1094507554833230220L;
    private static final Logger LOG = LoggerFactory.getLogger(CustomJSONExport.class);

    private String serverDomain = EMPTY;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {

        Map<String, String> exportMap = new HashMap<>();
        String base_path = "/content/experience-fragments/suncorp/insurance/aami/caasapi/experience";
        ResourceResolver resolver = request.getResourceResolver();
        Resource base_resource = resolver.getResource(base_path);
        ValueMap vm = base_resource.getValueMap();
        String parentPathValue = (String) vm.get("parentPath");
        if (isNotBlank(parentPathValue)) {
            Resource parent = resolver.getResource(parentPathValue);
            Iterator itr = parent.listChildren();
            while (itr.hasNext()) {
                Resource child = (Resource) itr.next();
                LOG.info("Resource Type:" + child.getResourceType());
                if (child.getResourceType().equalsIgnoreCase("dam:Asset")) {
                    ContentFragment cf = child.adaptTo(ContentFragment.class);
                    Iterator<ContentElement> ceItr = cf.getElements();
                    while (ceItr.hasNext()) {
                        ContentElement ce = ceItr.next();
                        exportMap.put(ce.getName(), ce.getContent());
                        if (ce.getName().equalsIgnoreCase("image") || ce.getName().equalsIgnoreCase("basdgeImage")) {
                            String externalPath = externalizer
                                    .externalLink(resolver, serverDomain, ce.getContent());
                            exportMap.put(ce.getName(), externalPath);
                        }
                    }
                }
            }
        }
        ObjectMapper objectMapper = new ObjectMapper();
        String json = objectMapper.writeValueAsString(exportMap);
        byte[] jsonResp = json.getBytes("UTF-8");

        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        response.setContentLength(jsonResp.length);
        response.getOutputStream().write(jsonResp);

    }

    @Activate
    @Modified
    protected void Activate(CustomJSONExport.Configuration config) {
        this.serverDomain = config.serverDomain();
    }

    @ObjectClassDefinition(name = "Externalizer server domain")
    public @interface Configuration {
        @AttributeDefinition(
                name = "Server Domain",
                description = "This configuration should have a valid name from externalizer configuration. Please refer \"Day CQ Externalizer Configuration\""
        )
        String serverDomain() default "local";
    }
}
